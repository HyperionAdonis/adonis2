1.文件：test.java
@SuppressWarnings("unchecked")  
public class test {  
	public static void main(String[] args) throws ExecutionException,  
	   InterruptedException {  
	   System.out.println("----程序开始运行----");  
	   Date date1 = new Date();  
	  
	   int taskSize = 5;  
	   // 创建一个线程池  
	   ExecutorService pool = Executors.newFixedThreadPool(taskSize);  
	   // 创建多个有返回值的任务  
	   List<Future> list = new ArrayList<Future>();  
	   for (int i = 0; i < taskSize; i++) {  
	    Callable c = new MyCallable("<task>"+i+"</task>");  
	    // 执行任务并获取Future对象  
	    Future f = pool.submit(c);  
	    // System.out.println(">>>" + f.get().toString());  
	    list.add(f);  
	   }  
	   // 关闭线程池  
	   pool.shutdown();  
	  
	   // 获取所有并发任务的运行结果  
	   for (Future f : list) {  
	    // 从Future对象上获取任务的返回值，并输出到控制台  
	    System.out.println(">>>" + f.get().toString());  
	   }  
	  
	   Date date2 = new Date();  
	   System.out.println("----程序结束运行----，程序运行时间【"  
	     + (date2.getTime() - date1.getTime()) + "毫秒】");  
}  
}  
2.文件：MyCallable.java

  public class MyCallable implements Callable<Object> {  
			private String taskNum;  
  
			MyCallable(String taskNum) {  
				this.taskNum = taskNum;  
			}  
  
		public Object call() throws Exception {  
			//System.out.println(">>>" + taskNum + "任务启动");  
			System.out.println("任务" +taskNum +"开始运行");
			Date dateTmp1 = new Date();  
			Thread.sleep(1000);  
			Date dateTmp2 = new Date();  
			long time = dateTmp2.getTime() - dateTmp1.getTime();  
			System.out.println("任务" + taskNum + "运行结束");  
			return "任务"+taskNum + ":返回运行结果,完成任务时间【" + time + "毫秒】";  
		}  
	}  
	
	
	/*************************************/
	          运行结果
	 ----程序开始运行----
任务<task>0</task>开始运行
任务<task>2</task>开始运行
任务<task>1</task>开始运行
任务<task>4</task>开始运行
任务<task>3</task>开始运行
任务<task>2</task>运行结束
任务<task>0</task>运行结束
>>>任务<task>0</task>:返回运行结果,完成任务时间【1000毫秒】
任务<task>4</task>运行结束
任务<task>1</task>运行结束
任务<task>3</task>运行结束
>>>任务<task>1</task>:返回运行结果,完成任务时间【1000毫秒】
>>>任务<task>2</task>:返回运行结果,完成任务时间【1000毫秒】
>>>任务<task>3</task>:返回运行结果,完成任务时间【1000毫秒】
>>>任务<task>4</task>:返回运行结果,完成任务时间【1000毫秒】
----程序结束运行----，程序运行时间【1005毫秒】         
	  
	  
	  

